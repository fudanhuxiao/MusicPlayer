package songs;

/*
 * Music Player
 *
 * This instructor-provided file implements the graphical user interface (GUI)
 * for the Music Player program and allows you to test the behavior
 * of your Song class.
 */

import java.awt.Container;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;

import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.UIManager;

public class MusicPlayer implements ActionListener, StdAudio.AudioEventListener {

    // instance variables
    private Song song;
    private boolean playing; // whether a song is currently playing
    private JFrame frame;
    private JFileChooser fileChooser;
    private JTextField tempoText;
    private JSlider currentTimeSlider;
    
    //these are the two labels that indicate time
    // to the right of the slider
    private JLabel currentTimeLabel;
    private JLabel totalTimeLabel;
    
    //this the label that says 'welcome to the music player'
    private JLabel statusLabel; 
   
    /*
     * Creates the music player GUI window and graphical components.
     */
    public MusicPlayer() {
        song = null;
        createComponents();
        doLayout();
        StdAudio.addAudioEventListener(this);
        frame.setVisible(true);
    }

    /*
     * Called when the user interacts with graphical components, such as
     * clicking on a button.
     */
    public void actionPerformed(ActionEvent event) {
        String cmd = event.getActionCommand();
        if (cmd.equals("Play")) {
           //fill this 
        } else if (cmd.equals("Pause")) {
            StdAudio.setPaused(!StdAudio.isPaused());
        } else if (cmd == "Stop") {
            StdAudio.setMute(true);
            StdAudio.setPaused(false);
        } else if (cmd == "Load") {
            try {
                loadFile();
            } catch (IOException ioe) {
                System.out.println("not able to load from the file");
            }
        } else if (cmd == "Reverse") {
            //TODO - fill this 
        } else if (cmd == "Up") {
           //TODO - fill this
        } else if (cmd == "Down") {
            //TODO - fill this
        } else if (cmd == "Change Tempo") {
            //TODO - fill this
        }
    }

    /*
     * Called when audio events occur in the StdAudio library. We use this to
     * set the displayed current time in the slider.
     */
    public void onAudioEvent(StdAudio.AudioEvent event) {
        // update current time
        if (event.getType() == StdAudio.AudioEvent.Type.PLAY
                || event.getType() == StdAudio.AudioEvent.Type.STOP) {
            setCurrentTime(getCurrentTime() + event.getDuration());
        }
    }

    /*
     * Sets up the graphical components in the window and event listeners.
     */
    private void createComponents() {
        //TODO - create all your components here.
        // note that you should have already defined your components as instance variables.
        doEnabling();
    }

    /*
     * Sets whether every button, slider, spinner, etc. should be currently
     * enabled, based on the current state of whether a song has been loaded and
     * whether or not it is currently playing. This is done to prevent the user
     * from doing actions at inappropriate times such as clicking play while the
     * song is already playing, etc.
     */
    private void doEnabling() {
       //TODO - figure out which buttons need to enabled
    }

    /*
     * Performs layout of the components within the graphical window. 
     * Also make the window a certain size and put it in the center of the screen.
     */
    private void doLayout() {
        //TODO - figure out how to layout the components
    }

    /*
     * Returns the estimated current time within the overall song, in seconds.
     */
    private double getCurrentTime() {
        String timeStr = currentTimeLabel.getText();
        timeStr = timeStr.replace(" /", "");
        try {
            return Double.parseDouble(timeStr);
        } catch (NumberFormatException nfe) {
            return 0.0;
        }
    }

    /*
     * Pops up a file-choosing window for the user to select a song file to be
     * loaded. If the user chooses a file, a Song object is created and used
     * to represent that song.
     */
    private void loadFile() throws IOException {
        if (fileChooser.showOpenDialog(frame) != JFileChooser.APPROVE_OPTION) {
            return;
        }
        File selected = fileChooser.getSelectedFile();
        if (selected == null) {
            return;
        }
        statusLabel.setText("Current song: " + selected.getName());
        String filename = selected.getAbsolutePath();
        System.out.println("Loading song from " + selected.getName() + " ...");
        
        //TODO - create a song from the file
        
        tempoText.setText("1.0");
        setCurrentTime(0.0);
        updateTotalTime();
        System.out.println("Loading complete.");
        System.out.println("Song: " + song);
        doEnabling();
    }

    /*
     * Initiates the playing of the current song in a separate thread (so
     * that it does not lock up the GUI). 
     * You do not need to change this method.
     * It will not compile until you make your Song class.
     */
    private void playSong() {
        if (song != null) {
            setCurrentTime(0.0);
            Thread playThread = new Thread(new Runnable() {
                public void run() {
                    StdAudio.setMute(false);
                    playing = true;
                    doEnabling();
                    String title = song.getTitle();
                    String artist = song.getArtist();
                    double duration = song.getTotalDuration();
                    System.out.println("Playing \"" + title + "\", by "
                            + artist + " (" + duration + " sec)");
                    song.play();
                    System.out.println("Playing complete.");
                    playing = false;
                    doEnabling();
                }
            });
            playThread.start();
        }
    }

    /*
     * Sets the current time display slider/label to show the given time in
     * seconds. Bounded to the song's total duration as reported by the song.
     */
    private void setCurrentTime(double time) {
        double total = song.getTotalDuration();
        time = Math.max(0, Math.min(total, time));
        currentTimeLabel.setText(String.format("%08.2f /", time));
        currentTimeSlider.setValue((int) (100 * time / total));
    }

    /*
     * Updates the total time label on the screen to the current total duration.
     */
    private void updateTotalTime() {
       //TODO - fill this
    }
}
